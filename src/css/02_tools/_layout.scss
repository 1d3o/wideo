// Mix with black
@function _shade($color, $percent){
  @return mix(black, $color, $percent);
}

// Mix with white
@function _tint($color, $percent){
  @return mix(white, $color, $percent);
}

// Classic Clearfix
@mixin clearfix {
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
  position: $type;
  $allowed_types: absolute relative fixed;
  @if not index($allowed_types, $type) {
    @warn "Unknown position: #{$type}.";
  }
  @each $data in top $top, right $right, bottom $bottom, left $left {
    #{nth($data, 1)}: nth($data, 2);
  }
}

// Visually hide but still accessible to screenreaders
@mixin visual-hide() {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  width: 1px;
}

@mixin visual-hide-off {
  position: static;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

// Text hiding for image based text replacement.
// Higher performance than -9999px because it only renders
// the size of the actual text, not a full 9999px box.
@mixin hide-text() {
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow($overflow: ellipsis) {
  overflow: hidden;
  text-overflow: $overflow;
  white-space: nowrap;
}

@mixin bg($pos1: center, $pos2: center, $size: cover, $rep: no-repeat) {
  background-position: $pos1 $pos2;
  background-size: $size;
  background-repeat: $rep
}

// Keeping text vertically centered at all screen sizes(Fixed Height)
// Apply on the parent. Requires inline-block on the child
@mixin pseudo-mid-align() {
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }
}

// Placeholder text
$pseudo-phprefix: "::-webkit-input-placeholder" "::-moz-placeholder" ":-ms-input-placeholder" "::placeholder";
@mixin placeholder {
  @each $pseudo in $pseudo-phprefix {
    @at-root #{&}#{$pseudo} {
      @content
    }
  }
}

// Sizing
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin centerer($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;
  @if not $width and not $height {
    transform: translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2);
  } @else if not $height {
    width: $width;
    margin-left: -($width / 2);
    transform: translateY(-50%);
  } @else {
    height: $height;
    margin-top: -($height / 2);
    transform: translateX(-50%);
  }
}

@mixin center-block() {
  display: block;
  float: none;
  margin-left: auto;
  margin-right: auto;
}

@mixin triangle($direction, $color: white, $size: 7px) {
  width: 0;
  height: 0;
  @if $direction == 'up' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if $direction == 'down' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else {
    @error "Valore errato inserito per '#{$direction}'. ";
  }
}

// Shorthand for border property
// @include border(1px, solid, red); // Apply to all four borders
// @include border(5px 0, solid, green); // vertical | horizontal
// @include border(2px 3px 5px, solid, blue);  // border-top | horizontal | border-bottom
// @include border(2px 1em 0 25px, dotted, pink); // border-top | border-right | border-bottom | border-left

@mixin border($widths, $styles, $colors) {
  @if type-of($widths) == 'number' and
    type-of($styles) == 'string' and
    type-of($colors) == 'color' {
    border: $widths $styles $colors;
  } @else if (type-of($widths) == 'list' or 'number') and
    (type-of($styles) == 'list' or 'string') and
    (type-of($colors) == 'list' or 'color') {

    // Define border property placeholders
    $border-top: ();
    $border-right: ();
    $border-bottom: ();
    $border-left: ();

    // Measure length of each argument value and
    // append it to appropriate placeholder recursivly
    @each $property in ($widths, $styles, $colors) {
      @if length($property) == 1 {
        $border-top: append($border-top, $property);
        $border-right: append($border-right, $property);
        $border-bottom: append($border-bottom, $property);
        $border-left: append($border-left, $property);
      } @else if length($property) == 2 {
        $border-top: append($border-top, nth($property, 1));
        $border-right: append($border-right, nth($property, 2));
        $border-bottom: append($border-bottom, nth($property, 1));
        $border-left: append($border-left, nth($property, 2));
      } @else if length($property) == 3 {
        $border-top: append($border-top, nth($property, 1));
        $border-right: append($border-right, nth($property, 2));
        $border-bottom: append($border-bottom, nth($property, 3));
        $border-left: append($border-left, nth($property, 2));
      } @else if length($property) == 4 {
        $border-top: append($border-top, nth($property, 1));
        $border-right: append($border-right, nth($property, 2));
        $border-bottom: append($border-bottom, nth($property, 3));
        $border-left: append($border-left, nth($property, 4));
      } @else {
        @warn "Invalid list length for border mixin arguments";
      }
    }

    @each $border-property in ($border-top, $border-right, $border-bottom, $border-left) {
      @if nth($border-property, 1) == 0 {
        $border-property: nth($border-property, 1);
      }
    }

    // Output generated properties
    border-top: $border-top;
    border-right: $border-right;
    border-bottom: $border-bottom;
    border-left: $border-left;
  } @else {
    @warn 'Check border mixin arguments';
  }
}

@mixin gradient (
  $bgColor,       // background-color
  $angle,         // gradient angle
  $gradientColor, // gradient color
  $opacityStart,  // opacity at start > 1 - 0
  $opacityEnd     // opacity at end > 1 - 0
  ) {
  background-color: $bgColor;
  background-image: linear-gradient(
    ($angle * 1deg),
    rgba($gradientColor, $opacityStart),
    rgba($gradientColor, $opacityEnd)
  );
  background-size: 100% 100%;
  background-position: 0 0;
  background-repeat: no-repeat;
}
// example
// @include gradient($purple-base, 180, $mint-base, 0.8, 0.6);

// Predefined gradients from http://mrmrs.io/gradients/
@mixin linear-gradient($type: 'aqua') {
  @if $type == 'aqua' {
    background: rgba(127,219,255,1);
    background: linear-gradient(to bottom, rgba(127,219,255,1) 0%, rgba(82,140,163,1) 100%);
  } @else if $type == 'blue' {
    background: rgba(0,116,217,1);
    background: linear-gradient(to bottom, rgba(0,116,217,1) 0%, rgba(0,65,122,1) 100%);
  } @else if $type == 'navy' {
    background: rgba(0,32,63,1);
    background: linear-gradient(to bottom, rgba(0,32,63,1) 0%, rgba(0,10,20,1) 100%);
  } @else if $type == 'teal' {
    background: rgba(57,204,204,1);
    background: linear-gradient(to bottom, rgba(57,204,204,1) 0%, rgba(34,122,122,1) 100%);
  } @else if $type == 'lime' {
    background: rgba(1,255,111,1);
    background: linear-gradient(to bottom, rgba(1,255,111,1) 0%, rgba(2,163,72,1) 100%);
  } @else if $type == 'orange' {
    background: rgba(255,133,27,1);
    background: linear-gradient(to bottom, rgba(255,133,27,1) 0%, rgba(255,80,27,1) 100%);
  } @else if $type == 'red' {
    background: rgba(246,46,36,1);
    background: linear-gradient(to bottom, rgba(246,46,36,1) 0%, rgba(255,54,121,1) 100%);
  } @else if $type == 'fuxia' {
    background: rgba(240,18,188,1);
    background: linear-gradient(to bottom, rgba(240,18,188,1) 0%, rgba(163,11,128,1) 100%);
  } @else if $type == 'purple' {
    background: rgba(176,13,201,1);
    background: linear-gradient(to bottom, rgba(176,13,201,1) 0%, rgba(107,7,122,1) 100%);
  } @else if $type == 'maroon' {
    background: rgba(204,31,115,1);
    background: linear-gradient(to bottom, rgba(204,31,115,1) 0%, rgba(133,20,75,1) 100%);
  } @else {
    @warn 'Check gradient mixin arguments';
  }
}
