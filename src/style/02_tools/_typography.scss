// Strip the units from a value
@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

// Calculate ems from a px value
@function em($px, $context: $em-base) {
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @return ($px / $context) * 1em;
}

@function rem($px) {
  @if (unitless($px)) {
    $px: $px * 1px;
  }
  @return #{$px / $em-base}rem;
}

// Check if value is an integer and returns true or false
@function is-int($number) {
  @return type-of($number) == number and floor(abs($number)) == abs($number);
}

// Returns an EM value. For example 24px becomes 1.5em
@function emCalc($target, $context: $base-font-size) {
  @return strip-units(($target / $context)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function emRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn  #{$lines} + $not-integer-txt;
  }
  @return (strip-units($lines) * strip-units($base-vertical-unit)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn #{$lines} + $not-integer-txt;
  }
  @return ($lines * strip-units($base-vertical-unit)) / (strip-units($font-size) * strip-units($base-font-size));
}

@mixin text-overflow() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Sets the type in EMs and makes a vertical rhythm unitless line-height that is
// based on context.
@mixin setType($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  font-size: $font-size;
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates a vertical rhythm unitless line-height that is based on context
@mixin setLeading($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates a pixel width border top with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorderTop($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-top-width: $border-width;
  padding-top: (($lines * strip-units($base-vertical-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Creates a pixel width border bottom with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorderBottom($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-bottom-width: $border-width;
  padding-bottom: (($lines * strip-units($base-vertical-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Creates a pixel width border with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorder($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-width: $border-width;
  padding: (($lines * strip-units($base-vertical-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag
@mixin debug-vertical-alignment($opacity: 0.8, $vertical-unit: $base-vertical-unit, $type-base-line-multi: $base-line-multi, $type-size: $base-em-font-size) {
  position: relative;

  &:before, &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    display: none;
  }

  &:before {
    z-index: 10;
    background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);
  }

  &:after {
    z-index: 9;
    background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% $vertical-unit;
  }

  &.u-debug:before, &.u-debug:after {
    display: block;
    pointer-events: none;
  }
}
